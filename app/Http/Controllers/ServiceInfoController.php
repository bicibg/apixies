<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Foundation\Application;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Route;

class ServiceInfoController extends Controller
{
    /**
     * Retrieve and display all API v1 routes for the service.
     *
     * @return Factory|Application|View|JsonResponse
     */
    public function getApiRoutes(): Factory|Application|View|JsonResponse
    {
        // Get every registered route
        $allRoutes = Route::getRoutes();

        // Filter to only those whose URI begins with api/v1/
        $apiRoutes = collect($allRoutes)
            ->filter(fn($route) =>
                str_starts_with($route->uri, 'api/v1/') &&            // <-- look for api/v1/
                $route->getName() &&                                   // keep only named routes
                ! str_starts_with($route->getName(), 'generated::')    // drop the autogenerated ones
            )
            ->map(fn($route) => [
                'method'       => implode('|', $route->methods),
                'uri'          => $route->uri,
                'description'  => $route->action['description']
                    ?? 'No description provided',
                'route_params' => $this->extractRouteParameters($route->uri),
                'query_params' => $route->action['required_params'] ?? [],
            ])
            ->values();  // reset the keys

        if (request()->expectsJson()) {
            return response()->json([
                'status' => 200,
                'data'   => $apiRoutes,
            ]);
        }

        return view('welcome', [
            'routes' => $apiRoutes,
        ]);
    }

    /**
     * Extract {parameters} from a URI string.
     */
    private function extractRouteParameters(string $uri): array
    {
        preg_match_all('/\{(.+?)\}/', $uri, $matches);
        return $matches[1] ?? [];
    }
}
