<?php

namespace App\Http\Controllers;

use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Foundation\Application;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Route;

class ServiceInfoController extends Controller
{
    /**
     * Retrieve and display all API v1 routes for the service.
     *
     * @return Factory|Application|View|JsonResponse
     */
    public function getApiRoutes(): Factory|Application|View|JsonResponse
    {
        // Get every registered route
        $allRoutes = Route::getRoutes();
        // Filter to only those whose URI begins with api/v1/
        $apiRoutes = collect($allRoutes)
            ->filter(fn($route) =>
                str_starts_with($route->uri, 'api/v1/') &&            // look for api/v1/
                $route->getName() &&                                   // keep only named routes
                ! str_starts_with($route->getName(), 'generated::')    // drop autogenerated ones
            )
            ->map(fn($route) => [
                'method'            => implode('|', $route->methods),
                'uri'               => $route->uri,
                'description'       => $route->action['description'] ?? 'No description provided',
                'route_params'      => $this->extractRouteParameters($route->uri),
                'query_params'      => $route->action['required_params'] ?? [],
                // attach a canned example response per‐endpoint:
                'example_response'  => $this->getExampleFor($route->uri),
            ])
            ->values();  // reset the keys
        if (request()->expectsJson()) {
            return response()->json([
                'status' => 200,
                'data'   => $apiRoutes,
            ]);
        }

        return view('docs.index', [
            'routes' => $apiRoutes,
        ]);
    }

    /**
     * Show details for a single API route.
     */
    public function showApiRoute(string $key)
    {
        // reuse the same collection logic
        $allRoutes = Route::getRoutes();
        $routes = collect($allRoutes)
            ->filter(fn($route) =>
                str_starts_with($route->uri, 'api/v1/') &&
                $route->getName() &&
                ! str_starts_with($route->getName(), 'generated::')
            )
            ->map(fn($route) => [
                'method'            => implode('|', $route->methods),
                'uri'               => $route->uri,
                'description'       => $route->action['description'] ?? 'No description provided',
                'route_params'      => $this->extractRouteParameters($route->uri),
                'query_params'      => $route->action['required_params'] ?? [],
                'example_response'  => $this->getExampleFor($route->uri),
            ])
            ->values();

        // find by URI segment
        $route = $routes->first(fn($r) => $r['uri'] === $key || "/{$r['uri']}" === $key);
        if (! $route) {
            abort(404);
        }

        return view('docs.show', compact('route'));
    }

    /**
     * Extract {parameters} from a URI string.
     */
    private function extractRouteParameters(string $uri): array
    {
        preg_match_all('/\{(.+?)\}/', $uri, $matches);
        return $matches[1] ?? [];
    }

    /**
     * Provide a canned example response array for each endpoint.
     */
    private function getExampleFor(string $uri): array
    {
        return match ($uri) {
            'api/v1/inspect-email' => [
                "status"    => "success",
                "http_code" => 200,
                "code"      => "200",
                "message"   => "Email inspection successful",
                "data"      => [
                    "email"             => "someone@example.com",
                    "format_valid"      => true,
                    "domain_resolvable" => false,
                    "mx_records_found"  => false,
                    "mailbox_exists"    => false,
                    "is_disposable"     => false,
                    "is_role_based"     => false,
                    "suggestion"        => "someone@example.com"
                ],
            ],

            'api/v1/inspect-headers' => [
                "status"    => "success",
                "http_code" => 200,
                "code"      => "200",
                "message"   => "Security headers inspection successful",
                "data"      => [
                    "url"         => "https://apixies.io",
                    "status_code" => 200,
                    "headers"     => [
                        "strict-transport-security"     => "max-age=63072000; includeSubDomains; preload",
                        "content-security-policy"       => "default-src 'self'; img-src 'self' https: data:; object-src 'none'; frame-ancestors 'none'",
                        "referrer-policy"               => "strict-origin-when-cross-origin",
                        "permissions-policy"            => "geolocation=(), microphone=(), camera=()",
                        "x-frame-options"               => "DENY",
                        "x-content-type-options"        => "nosniff",
                        "x-xss-protection"              => "1; mode=block",
                        "cross-origin-opener-policy"    => "same-origin",
                        "cross-origin-embedder-policy"  => "require-corp",
                        "cross-origin-resource-policy"  => "same-origin",
                    ],
                    "missing"    => [],
                    "grade"      => "A+",
                    "scanned_at" => "2025-05-12T12:34:56Z"
                ],
            ],


            'api/v1/inspect-user-agent' => [
                "status"    => "success",
                "http_code" => 200,
                "code"      => "200",
                "message"   => "User‑Agent inspection successful",
                "data"      => [
                    "user_agent" => "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
                    "is_bot"     => false,
                    "device"     => ["family" => "Desktop", "model" => null, "brand" => null],
                    "os"         => ["family" => "macOS", "major" => "13", "minor" => "4", "patch" => null],
                    "browser"    => ["family" => "Chrome", "major" => "123", "minor" => "0", "patch" => "0"],
                    "scanned_at" => "2025-05-12T12:34:56+00:00"
                ],
            ],

            'api/v1/inspect-ssl' => [
                "status"    => "success",
                "http_code" => 200,
                "code"      => "200",
                "message"   => "SSL inspection successful",
                "data"      => [
                    "domain"      => "example.com",
                    "port"        => 443,
                    "valid"       => true,
                    "issuer"      => "Let's Encrypt",
                    "subject"     => "example.com",
                    "subject_alt" => "DNS:example.com, DNS:www.example.com",
                    "expires_at"  => "2026-03-12T04:13:00+00:00",
                    "days_left"   => 305,
                    "scanned_at"  => "2025-05-12T12:34:56+00:00"
                ],
            ],

            default => [
                "status"    => "success",
                "http_code" => 200,
                "code"      => strtoupper(str_replace(['/', '-', '.'], '_', $uri)) . "_OK",
                "message"   => "Request successful",
                "data"      => new \stdClass(),
            ],
        };
    }
}
